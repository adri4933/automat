geom.ind="point",
col.ind=data$Traitement,
palette=c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = T)
library(impute)
library(dplyr)
cbind(Souris, Traitement,
as.data.frame(impute.knn(as.matrix(data[,3:ncol(data)]), k=10)$data)
)
Souris <- data$Souris
Traitement <- data$Traitement
cbind(Souris, Traitement,
as.data.frame(impute.knn(as.matrix(data[,3:ncol(data)]), k=10)$data)
)
data <- read_excel("donnees.xlsx", skip = 1)
dataImputed <- cbind(Souris, Traitement,
as.data.frame(impute.knn(as.matrix(data[,3:ncol(data)]), k=10)$data)
)
data <- cbind(Souris, Traitement,
as.data.frame(impute.knn(as.matrix(data[,3:ncol(data)]), k=10)$data)
)
#normalisation
data[, 3:ncol(data)] <- log10(data[, 3:ncol(data)]) #log transformation
means <- apply(data[, 3:ncol(data)], 2, mean, na.rm = TRUE)
std_devs <- apply(data[, 3:ncol(data)], 2, sd, na.rm = TRUE)
data[, 3:ncol(data)] <- scale(data[, 3:ncol(data)], center=means, scale=std_devs)
a <- PCA(data[,3:ncol(data)])
fviz_pca_ind(a,
geom.ind="point",
col.ind=data$Traitement,
palette=c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = T)
?impute.knn
a <- PCA(data[,3:ncol(data)])
fviz_pca_ind(a,
geom.ind="point",
col.ind=data$Traitement,
palette=c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = T)
install.packages("cluster")
library(cluster)
autoplot(fanny(data[,3:ncol(data)],3),frame=T)
autoplot(clara(data[,3:ncol(data)],3),frame=T)
cluster::autoplot(clara(data[,3:ncol(data)],3),frame=T)
install.packages("ggfortify")
library(ggfortify)
autoplot(clara(data[,3:ncol(data)],3),frame=T)
names(data)
data <- data %>% rename("IR_Y_Maze"=`IR% Y Maze`,
"IR_MWM"=`IR% MWM`,
"AUC_StratSpatial"=`AUC StratSpatial`)
autoplot(clara(data[,3:ncol(data)],3),frame=T)
data <- read_excel("donnees.xlsx", skip = 1)
library(readxl)
library(Hmisc)
setwd("Z:/ldinel/adpeltier/Stat CamilleM")
data <- read_excel("donnees.xlsx", skip = 1)
library("FactoMineR")
library(factoextra)
library(missMDA)
data$Traitement<-as.factor(data$Traitement)
Souris <- data$Souris
Traitement <- data$Traitement
librari(naniar)
library(naniar)
vis_miss(data)
data <- cbind(Souris, Traitement,
as.data.frame(impute.knn(as.matrix(data[,3:ncol(data)]), k=10)$data)
)
library(impute)
data <- cbind(Souris, Traitement,
as.data.frame(impute.knn(as.matrix(data[,3:ncol(data)]), k=10)$data)
)
vis_miss(data)
boxplot(data[,3:ncol(data)], las=2)
boxplot(data[,3:ncol(data)])
boxplot(data[,3:ncol(data)], las=2)
?boxplot()
#normalisation
data[, 3:ncol(data)] <- log10(data[, 3:ncol(data)]) #log transformation
boxplot(data[,3:ncol(data)], las=2)
library(mdatools)
means <- apply(data[, 3:ncol(data)], 2, mean, na.rm = TRUE)
std_devs <- apply(data[, 3:ncol(data)], 2, sd, na.rm = TRUE)
data[, 3:ncol(data)] <- scale(data[, 3:ncol(data)], center=means, scale=std_devs)
boxplot(data[,3:ncol(data)], las=2)
a <- PCA(data[,3:ncol(data)])
fviz_pca_ind(a,
geom.ind="point",
col.ind=data$Traitement,
palette=c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = T)
fviz_pca_ind(a,
geom.ind="point",
col.ind=data$Traitement,
palette=c("darkred", "darkgreen", "darkblue"),
addEllipses = T)
fviz_pca_ind(a,
geom.ind="point",
col.ind=data$Traitement,
palette=c("darkred", "darkgreen", "blue"),
addEllipses = T)
fviz_pca_ind(a,
geom.ind="point",
col.ind=data$Traitement,
palette=c("darkred", "darkgreen", "blue"),
addEllipses = T)
?fviz_pca_ind
pca(iris)
pca(iris[,1:4])
b <- pca(iris[,1:4])
b <- PCA(iris[,1:4])
fviz_pca_ind(b,
geom.ind="point",
col.ind=iris$Species,
palette=c("darkred", "darkgreen", "blue"),
addEllipses = T)
write.csv(iris, "iris.csv")
load(iris)
iris <- iris
iris[,1:4] <- log10(iris[,1:4])
means <- apply(iris[, 3:ncol(iris)], 2, mean, na.rm = TRUE)
std_devs <- apply(iris[, 3:ncol(iris)], 2, sd, na.rm = TRUE)
iris <- iris
iris[,1:4] <- log10(iris[,1:4])
means <- apply(data[, 3:ncol(data)], 2, mean, na.rm = TRUE)
means <- apply(iris[, 1:4], 2, mean, na.rm = TRUE)
std_devs <- apply(iris[, 1:4], 2, sd, na.rm = TRUE)
iris[, 1:4] <- scale(iris[, 1:4], center=means, scale=std_devs)
PCA(iris)
PCA(iris[,1:4])
iris <- iris
iris[,1:4] <- log10(iris[,1:4])
iris <- iris
iris[,1:4] <- log10(iris[,1:4])
means <- apply(iris[, 1:4], 2, mean, na.rm = TRUE)
std_devs <- apply(iris[, 1:4], 2, sd, na.rm = TRUE)
iris[, 1:4] <- scale(iris[, 1:4], center=means, scale=std_devs)
PCA(iris[,1:4])
b <- PCA(iris[,1:4])
fviz_pca_ind(b,
geom.ind="point",
col.ind=iris$Species,
palette=c("darkred", "darkgreen", "blue"),
addEllipses = T)
?impute.knn
fviz_pca_ind(a,
geom.ind="point",
col.ind=data$Traitement,
palette=c("darkred", "darkgreen", "blue"),
addEllipses = T)
data <- read_excel("donnees.xlsx", skip = 1)
data$Traitement<-as.factor(data$Traitement)
Souris <- data$Souris
Traitement <- data$Traitement
data <- cbind(Souris, Traitement,
as.data.frame(impute.knn(as.matrix(data[,3:ncol(data)]), k=10)$data)
)
boxplot(data[,3:ncol(data)], las=2)
means <- apply(data[, 3:ncol(data)], 2, mean, na.rm = TRUE)
std_devs <- apply(data[, 3:ncol(data)], 2, sd, na.rm = TRUE)
data[, 3:ncol(data)] <- scale(data[, 3:ncol(data)], center=means, scale=std_devs)
boxplot(data[,3:ncol(data)], las=2)
a <- PCA(data[,3:ncol(data)])
fviz_pca_ind(a,
geom.ind="point",
col.ind=data$Traitement,
palette=c("darkred", "darkgreen", "blue"),
addEllipses = T)
data <- read_excel("donnees.xlsx", skip = 1)
#normalisation
data[, 3:ncol(data)] <- log10(data[, 3:ncol(data)]) #log transformation
means <- apply(data[, 3:ncol(data)], 2, mean, na.rm = TRUE)
std_devs <- apply(data[, 3:ncol(data)], 2, sd, na.rm = TRUE)
data[, 3:ncol(data)] <- scale(data[, 3:ncol(data)], center=means, scale=std_devs)
boxplot(data[,3:ncol(data)], las=2)
a <- PCA(data[,3:ncol(data)])
fviz_pca_ind(a,
geom.ind="point",
col.ind=data$Traitement,
palette=c("darkred", "darkgreen", "blue"),
addEllipses = T)
data <- read_excel("donnees.xlsx", skip = 1)
#normalisation
data[, 3:ncol(data)] <- log10(data[, 3:ncol(data)]) #log transformation
means <- apply(data[, 3:ncol(data)], 2, mean, na.rm = TRUE)
std_devs <- apply(data[, 3:ncol(data)], 2, sd, na.rm = TRUE)
data[, 3:ncol(data)] <- scale(data[, 3:ncol(data)], center=means, scale=std_devs)
data <- read.csv("donneesCSV.csv")
data <- read.csv("donneesCSV.csv", head=T)
?read.csv
data <- read.csv("donneesCSV.csv", header=T)
data <- read.csv("donneesCSV.csv", header=T, sep=";")
#normalisation
data[, 3:ncol(data)] <- log10(data[, 3:ncol(data)]) #log transformation
library(dplyr)
names(data[,3:ncol(data)])
data <- data %>% mutate_at(names(data[,3:ncol(data)]), as.numeric)
data <- read.csv("donneesCSV.csv", header=T, sep=";")
data <- read.csv("donneesCSV.csv", header=T, sep=";", dec=",")
#normalisation
data[, 3:ncol(data)] <- log10(data[, 3:ncol(data)]) #log transformation
means <- apply(data[, 3:ncol(data)], 2, mean, na.rm = TRUE)
std_devs <- apply(data[, 3:ncol(data)], 2, sd, na.rm = TRUE)
data[, 3:ncol(data)] <- scale(data[, 3:ncol(data)], center=means, scale=std_devs)
boxplot(data[,3:ncol(data)], las=2)
a <- PCA(data[,3:ncol(data)])
fviz_pca_ind(a,
geom.ind="point",
col.ind=data$Traitement,
palette=c("darkred", "darkgreen", "blue"),
addEllipses = T)
library(MetaboAnalystR)
mSet<-InitDataObjects("conc", "stat", FALSE)
mSet<-Read.TextData(mSet, "donneesCSV.csv", "rowu", "disc");
mSet<-SanityCheckData(mSet)
mSet<-RemoveMissingPercent(mSet, percent=0.5)
mSet<-ImputeMissingVar(mSet, method="mean")
mSet<-PreparePrenormData(mSet)
mSet<-Normalization(mSet, "NULL", "LogNorm", "AutoNorm", ratio=FALSE, ratioNum=20)
mSet<-PCA.Anal(mSet)
mSet<-PlotPCAPairSummary(mSet, "pca_pair_0_", "png", 72, width=NA, 5)
mSet<-PlotPCA2DScore(mSet, "pca_score2d_0_", "png", 72, width=NA, 1,2,0.95,0,0, "na")
library(mixOmics)
test <- mixOmics::splsda(pca.impute$completeObs[,3:ncol(data)],
pca.impute$completeObs$Traitement,
ncomp=2,
scale=T)
data <- cbind(Souris, Traitement,
as.data.frame(impute.knn(as.matrix(data[,3:ncol(data)]), k=10)$data)
)
a <- PCA(data[,3:ncol(data)])
fviz_pca_ind(a,
geom.ind="point",
col.ind=data$Traitement,
palette=c("darkred", "darkgreen", "blue"),
addEllipses = T)
test <- mixOmics::splsda(pca.impute$completeObs[,3:ncol(data)],
pca.impute$completeObs$Traitement,
ncomp=2,
scale=T)
test <- mixOmics::splsda(data[,3:ncol(data)],
pca.impute$completeObs$Traitement,
ncomp=2,
scale=T)
test <- mixOmics::splsda(data[,3:ncol(data)],
data$Traitement,
ncomp=2,
scale=T)
plotIndiv(test, ind.names=T, ellipse=T, legend=T)
?splsda
test <- mixOmics::splsda(data[,3:ncol(data)],
data$Traitement,
ncomp=2,
scale=T)
plotIndiv(test, ind.names=T, ellipse=T, legend=T)
?plsda
test <- mixOmics::plsda(data[,3:ncol(data)],
data$Traitement,
ncomp=2,
scale=T)
plotIndiv(test, ind.names=T, ellipse=T, legend=T)
?plotIndiv
?plsda
mdatools::plsda(data[,3:ncol(data)],
data$Traitement)
?PCA
a <- PCA(data[,3:ncol(data)], ncp = 2)
fviz_pca_ind(a,
geom.ind="point",
col.ind=data$Traitement,
palette=c("darkred", "darkgreen", "blue"),
addEllipses = T)
?PCA
a <- PCA(data[,3:ncol(data)], ncp = 2, scale.unit = F)
fviz_pca_ind(a,
geom.ind="point",
col.ind=data$Traitement,
palette=c("darkred", "darkgreen", "blue"),
addEllipses = T)
library(readxl)
library(rstatix)
setwd("Z:/ldinel/adpeltier/Stat EmieD/02_R_files")
data <- read_excel("data_controlstress_imputed.xlsx")
data$group <- as.factor(data$group)
data$supplementation <- as.factor(data$supplementation)
colnames(data) <- gsub("-", "_", colnames(data))
colnames(data) <- gsub(" ", "", colnames(data))
# which(colnames(data)=="3_HAO")
colnames(data)[24] <- "HAO_3"
# which(colnames(data)=="5HTR")
colnames(data)[60] <- "HTR_5"
# which(colnames(data)=="IDO=IDO1")
colnames(data)[82] <- "IDO_IDO1"
anovaqPCR <- function(df){
vecNames <- c()
vecPval <- c()
vecPvalTissu <- c()
vecPvalInteraction <- c()
baseformula <- " ~ group*tissu"
for(i in 2:(ncol(df)-4)) {
formula <- paste(colnames(df)[i], baseformula, sep="")
p <- summary(aov(as.formula(formula), data=df))[[1]][["Pr(>F)"]][1]
p_tissu <- summary(aov(as.formula(formula), data=df))[[1]][["Pr(>F)"]][2]
p_interaction <- summary(aov(as.formula(formula), data=data))[[1]][["Pr(>F)"]][3]
vecNames <- c(vecNames, colnames(df)[i])
vecPval <- c(vecPval, p)
vecPvalTissu <- c(vecPvalTissu, p_tissu)
vecPvalInteraction <- c(vecPvalInteraction, p_interaction)
}
return(data.frame(noms=vecNames,
pval=vecPval,
pval_tissu=vecPvalTissu,
pval_interaction=vecPvalInteraction))
}
results <- anovaqPCR(data)
subset(results, pval<0.10)
summary(aov(GR~group*tissu,data=data))
summary(aov(GR~group, data=data))
data_amy <- data[grepl("AMY", data$names),]
data_hc <- data[grepl("HC", data$names),]
summary(aov(GR~group, data=data_amy))
summary(aov(GR~group, data=data_hc))
anovaqPCR <- function(df){
vecNames <- c()
vecPval <- c()
vecPvalTissu <- c()
vecPvalInteraction <- c()
baseformula <- " ~ group"
for(i in 2:(ncol(df)-4)) {
formula <- paste(colnames(df)[i], baseformula, sep="")
p <- summary(aov(as.formula(formula), data=df))[[1]][["Pr(>F)"]][1]
# p_tissu <- summary(aov(as.formula(formula), data=df))[[1]][["Pr(>F)"]][2]
# p_interaction <- summary(aov(as.formula(formula), data=data))[[1]][["Pr(>F)"]][3]
vecNames <- c(vecNames, colnames(df)[i])
vecPval <- c(vecPval, p)
# vecPvalTissu <- c(vecPvalTissu, p_tissu)
# vecPvalInteraction <- c(vecPvalInteraction, p_interaction)
}
return(data.frame(noms=vecNames,
pval=vecPval#,
# pval_tissu=vecPvalTissu,
# pval_interaction=vecPvalInteraction
))
}
results <- anovaqPCR(data)
results <- anovaqPCR(data_amy)
subset(results, pval<0.10)
summary(aov(GPX1~group, data=data_amy))
dfexport <- results[order(results$pval),]
write_xlsx(dfexport, "pvalGenes_amy.xlsx")
library(writexl)
write_xlsx(dfexport, "pvalGenes_amy.xlsx")
results <- anovaqPCR(data_hc)
subset(results, pval<0.10)
dfexport <- results[order(results$pval),]
summary(aov(GR~group, data=data_hc))
write_xlsx(dfexport, "pvalGenes_hc.xlsx")
data <- read_excel("data_controlstress_noimpute.xlsx")
data$group <- as.factor(data$group)
data$supplementation <- as.factor(data$supplementation)
colnames(data) <- gsub("-", "_", colnames(data))
colnames(data) <- gsub(" ", "", colnames(data))
# which(colnames(data)=="3_HAO")
colnames(data)[24] <- "HAO_3"
# which(colnames(data)=="5HTR")
colnames(data)[60] <- "HTR_5"
# which(colnames(data)=="IDO=IDO1")
colnames(data)[82] <- "IDO_IDO1"
data_amy <- data[grepl("AMY", data$names),]
data_hc <- data[grepl("HC", data$names),]
results <- anovaqPCR(data_amy)
dfexport <- results[order(results$pval),]
write_xlsx(dfexport, "pvalGenes_amy2.xlsx")
results <- anovaqPCR(data_hc)
dfexport <- results[order(results$pval),]
write_xlsx(dfexport, "pvalGenes_hc2.xlsx")
table(data$group)
setwd("Z:/ldinel/adpeltier/Stat CamilleM")
data <- read_excel("donnees.xlsx", skip = 1)
data <- read.csv("donneesCSV.csv", header=T, sep=";", dec=",")
library("FactoMineR")
library(factoextra)
library(missMDA)
library(impute)
library(mdatools)
library(vegan)
data[,3:ncol(data)]
#normalisation
data[, 3:ncol(data)] <- log10(data[, 3:ncol(data)]) #log transformation
means <- apply(data[, 3:ncol(data)], 2, mean, na.rm = TRUE)
std_devs <- apply(data[, 3:ncol(data)], 2, sd, na.rm = TRUE)
data[, 3:ncol(data)] <- scale(data[, 3:ncol(data)], center=means, scale=std_devs)
boxplot(data[,3:ncol(data)], las=2)
prin_comp <- rda(data[,3:ncol(data)], scale=T)
data <- cbind(Souris, Traitement,
as.data.frame(impute.knn(as.matrix(data[,3:ncol(data)]), k=10)$data)
)
Souris <- data$Souris
Traitement <- data$Traitement
data <- cbind(Souris, Traitement,
as.data.frame(impute.knn(as.matrix(data[,3:ncol(data)]), k=10)$data)
)
prin_comp <- rda(data[,3:ncol(data)], scale=T)
pca_scores <- scores(prin_comp)
plot(pca_scores$sites[,1],
pca_scores$sites[,2],
pch=21,
bg=point_colors(data$Traitement))
plot(pca_scores$sites[,1],
pca_scores$sites[,2],
pch=21
)
plot(pca_scores$sites[,1],
pca_scores$sites[,2],
pch=21,
bg=as.numeric(data$Traitement)
)
data$Traitement<-as.factor(data$Traitement)
plot(pca_scores$sites[,1],
pca_scores$sites[,2],
pch=21,
bg=as.numeric(data$Traitement)
)
ordiellipse(prin_comp,data$Traitement,conf=0.99)
ordiellipse(prin_comp,data$Traitement,conf=0.95)
ordiellipse(prin_comp,data$Traitement,conf=0.95)
ordiellipse(prin_comp,data$Traitement,conf=0.94)
ordiellipse(prin_comp,data$Traitement,conf=0.93)
ordiellipse(prin_comp,data$Traitement,conf=0.92)
plot(pca_scores$sites[,1],
pca_scores$sites[,2],
pch=21,
bg=as.numeric(data$Traitement)
)
ordiellipse(prin_comp,data$Traitement,conf=0.01)
plot(pca_scores$sites[,1],
pca_scores$sites[,2],
pch=21,
bg=as.numeric(data$Traitement)
)
ordiellipse(prin_comp,data$Traitement,conf=0.95)
plot(pca_scores$sites[,1],
pca_scores$sites[,2],
pch=21,
bg=as.numeric(data$Traitement),
xlim=c(-2,2),
ylim=c(-2,2)
)
ordiellipse(prin_comp,data$Traitement,conf=0.95)
plot(pca_scores$sites[,1],
pca_scores$sites[,2],
pch=21,
bg=as.numeric(data$Traitement),
xlim=c(-4,4),
ylim=c(-4,4)
)
ordiellipse(prin_comp,data$Traitement,conf=0.95)
### PLSDA
library(mixOmics)
data("srbct")
X <- srbct$gene
srbct$gene
X <- data[,3:ncol(data)]
Y <- data$Traitement
result <- plsda(X,Y)
plotIndiv(result)
plotIndiv(result, ellipse=T)
plotIndiv(result, ellipse=T, legend=T)
data <- read.csv("donneesCSV.csv", header=T, sep=";", dec=",")
data[, 3:ncol(data)] <- log10(data[, 3:ncol(data)]) #log transformation
X <- data[,3:ncol(data)]
Y <- data$Traitement
result <- plsda(X,Y)
plotIndiv(result, ellipse=T, legend=T)
data$Traitement
data$Traitement <- as.factor(data$Traitement)
result <- plsda(X,Y)
plotIndiv(result, ellipse=T, legend=T)
a <- PCA(data[,3:ncol(data)], ncp = 2, scale.unit = F)
fviz_pca_ind(a,
geom.ind="point",
col.ind=data$Traitement,
palette=c("darkred", "darkgreen", "blue"),
addEllipses = T)
Souris <- data$Souris
Traitement <- data$Traitement
data <- cbind(Souris, Traitement,
as.data.frame(impute.knn(as.matrix(data[,3:ncol(data)]), k=10)$data)
)
a <- PCA(data[,3:ncol(data)], ncp = 2, scale.unit = F)
fviz_pca_ind(a,
geom.ind="point",
col.ind=data$Traitement,
palette=c("darkred", "darkgreen", "blue"),
addEllipses = T)
a <- PCA(data[,3:ncol(data)], ncp = 2, scale.unit = F)
means <- apply(data[, 3:ncol(data)], 2, mean, na.rm = TRUE)
a <- PCA(data[,3:ncol(data)], ncp = 2, scale.unit = T)
fviz_pca_ind(a,
geom.ind="point",
col.ind=data$Traitement,
palette=c("darkred", "darkgreen", "blue"),
addEllipses = T)
std_devs <- apply(data[, 3:ncol(data)], 2, sd, na.rm = TRUE)
data[, 3:ncol(data)] <- scale(data[, 3:ncol(data)], center=means, scale=std_devs)
a <- PCA(data[,3:ncol(data)], ncp = 2, scale.unit = T)
fviz_pca_ind(a,
geom.ind="point",
col.ind=data$Traitement,
palette=c("darkred", "darkgreen", "blue"),
addEllipses = T)
